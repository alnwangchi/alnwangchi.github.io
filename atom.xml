<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AllenW BLOG</title>
  
  
  <link href="https://alnwangchi.github.io/atom.xml" rel="self"/>
  
  <link href="https://alnwangchi.github.io/"/>
  <updated>2021-11-26T15:00:51.336Z</updated>
  <id>https://alnwangchi.github.io/</id>
  
  <author>
    <name>Allen Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Music Player</title>
    <link href="https://alnwangchi.github.io/2021/11/26/Music-Player/"/>
    <id>https://alnwangchi.github.io/2021/11/26/Music-Player/</id>
    <published>2021-11-26T15:00:41.000Z</published>
    <updated>2021-11-26T15:00:51.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Music-Player-實作"><a href="#Music-Player-實作" class="headerlink" title="Music Player 實作"></a>Music Player 實作</h1><h6 id="tags-實作-CSS-javascript"><a href="#tags-實作-CSS-javascript" class="headerlink" title="tags: 實作 CSS javascript"></a>tags: <code>實作</code> <code>CSS</code> <code>javascript</code></h6><p><a href="https://allenw0815.github.io/mission/mission_26/index.html">實作頁面連結</a></p><p><img src="https://i.imgur.com/FKmTHXY.png"></p><h3 id="Flowchart"><a href="#Flowchart" class="headerlink" title="Flowchart"></a>Flowchart</h3><ol><li>寫 HTML 結構</li><li>寫 CSS，這實作比較複雜，應會用到偽元素以及 animate</li><li>透過 JS 去讓 audio 播放以及暫停</li><li>播放以及暫停時分別需要做哪些事情?</li><li>讓進度條樣式對應到撥放的時間點上</li></ol><blockquote><p>JS 流程</p></blockquote><p>1.先把所需的 DOM 取好，用陣列存放歌曲名稱，畫面載入時依照陣列索引的名稱設定是哪首歌</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> songs = [<span class="string">&#x27;Lost_in_paradise&#x27;</span>,<span class="string">&#x27;Desperado&#x27;</span>,<span class="string">&#x27;Wild_side&#x27;</span>,<span class="string">&#x27;山雀&#x27;</span>,<span class="string">&#x27;Yuve_Yuve_Yu&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> songIndex = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadingSong</span> (<span class="params">song</span>) </span>&#123;</span><br><span class="line">    musicName.innerText = song.replaceAll(<span class="string">&#x27;_&#x27;</span>,<span class="string">&#x27; &#x27;</span>) <span class="comment">//顯示歌名 替換掉不要的符號</span></span><br><span class="line">    audio.src = <span class="string">`music/<span class="subst">$&#123;song&#125;</span>.mp3`</span> <span class="comment">//找對應音源</span></span><br><span class="line">    img.src = <span class="string">`img/<span class="subst">$&#123;song&#125;</span>.png`</span> <span class="comment">//找對應圖片</span></span><br><span class="line">&#125;</span><br><span class="line">loadingSong(songs[songIndex])</span><br></pre></td></tr></table></figure><p>2.點擊播放鍵時，判斷是否正在撥放分別去做暫停及播放兩個相反的 function</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> playingMode = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    audio.play() <span class="comment">// 音源播放</span></span><br><span class="line">    musicContainer.classList.add(<span class="string">&#x27;play&#x27;</span>) <span class="comment">// 替元素添加 class 來觸發 animate</span></span><br><span class="line">    playBtn.querySelector(<span class="string">&#x27;i&#x27;</span>).classList.remove(<span class="string">&#x27;fa-play&#x27;</span>) <span class="comment">// 移除當前圖示</span></span><br><span class="line">    playBtn.querySelector(<span class="string">&#x27;i&#x27;</span>).classList.add(<span class="string">&#x27;fa-pause&#x27;</span>) <span class="comment">// 更新圖示</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">musicPlay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> isPlaying = musicContainer.classList.contains(<span class="string">&#x27;play&#x27;</span>) <span class="comment">// 回傳 Boolean</span></span><br><span class="line">    isPlaying ? pauseMode() : playingMode()</span><br><span class="line">&#125;</span><br><span class="line">playBtn.addEventListener(<span class="string">&#x27;click&#x27;</span>,musicPlay)</span><br></pre></td></tr></table></figure><p>3.前後鍵點擊</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">musicNext</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    songIndex &lt; songs.length -<span class="number">1</span>  ? songIndex++ : songIndex <span class="comment">// 限制在最後一首</span></span><br><span class="line">    loadingSong(songs[songIndex]) <span class="comment">// 更新歌曲</span></span><br><span class="line">    playingMode() <span class="comment">// 播放</span></span><br><span class="line">&#125;</span><br><span class="line">nextBtn.addEventListener(<span class="string">&#x27;click&#x27;</span>,musicNext)</span><br></pre></td></tr></table></figure><p>4.監聽歌曲長度以及當前歌曲時間搭配 CSS 實現進度條動畫及點擊跳轉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateProgress</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 這邊為解構賦值</span></span><br><span class="line">    <span class="keyword">const</span> &#123;duration,currentTime&#125; = e.srcElement <span class="comment">// 取得總長跟播放到的長度</span></span><br><span class="line">    <span class="keyword">const</span> progressPercent = (currentTime / duration) * <span class="number">100</span> <span class="comment">// 取得百分比的數字</span></span><br><span class="line">    progress.style.width = <span class="string">`<span class="subst">$&#123;progressPercent&#125;</span>%`</span> <span class="comment">// 讓有顏色的進度條根據進度顯示</span></span><br><span class="line">&#125;</span><br><span class="line">audio.addEventListener(<span class="string">&#x27;timeupdate&#x27;</span>,updateProgress) <span class="comment">// 音源播放時持續觸發</span></span><br><span class="line"><span class="comment">// 正確說法是 currentTime 變更時觸發，感覺很耗能應該可以壓低頻率</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setProgress</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> width = <span class="built_in">this</span>.clientWidth <span class="comment">// div的長度</span></span><br><span class="line">    <span class="keyword">const</span> x = e.offsetX <span class="comment">// 點擊位置的長度</span></span><br><span class="line">    <span class="keyword">const</span> duration =  audio.duration</span><br><span class="line">    audio.currentTime = ( x / width ) * duration</span><br><span class="line">    <span class="comment">// 代表點的位置是總長的幾分之幾再*總長就會得出相對應的當前播放時間然後更新currentTime</span></span><br><span class="line">&#125;</span><br><span class="line">progressArea.addEventListener(<span class="string">&#x27;click&#x27;</span>,setProgress)</span><br></pre></td></tr></table></figure><p>5.歌曲結束後換下一首，就好比結束後觸發點擊下一首按鍵一樣</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">audio.addEventListener(<span class="string">&#x27;ended&#x27;</span>,musicNext)</span><br></pre></td></tr></table></figure><h3 id="紀錄"><a href="#紀錄" class="headerlink" title="紀錄"></a>紀錄</h3><ul><li>currentTime 播放時不停變更</li></ul><p> <img src="https://i.imgur.com/syuAd08.png"></p><ul><li><p>動畫可以使用多個效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> rotate &#123;</span><br><span class="line">    <span class="number">0%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>) <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>) <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span>&#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>) <span class="built_in">scale</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>透過兩個重疊但顏色不同的元素，配合 JS 來實現進度條效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.music-container</span> <span class="selector-class">.music-info</span> <span class="selector-class">.progress-area</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;   </span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">235</span>, <span class="number">233</span>, <span class="number">233</span>);</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.music-container</span> <span class="selector-class">.music-info</span> <span class="selector-class">.progress-area</span> <span class="selector-class">.progress</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">145</span>, <span class="number">206</span>, <span class="number">245</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0%</span>;</span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">0.1s</span> linear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>透過添加 class 觸發 aninate 以及 進出場動畫</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img-container</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  在最外層元素加上 play 讓動畫開始 */</span></span><br><span class="line"><span class="selector-class">.music-container</span><span class="selector-class">.play</span> <span class="selector-class">.img-container</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">animation-play-state</span>: running;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.music-info</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.music-container</span><span class="selector-class">.play</span> <span class="selector-class">.music-info</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">translateY</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font style="color:red">解構賦值</font>抓到對應的key</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a,b,e&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>, <span class="attr">e</span>:<span class="number">65</span>&#125;</span><br><span class="line">a; <span class="comment">// 10</span></span><br><span class="line">b; <span class="comment">// 10</span></span><br><span class="line">c; <span class="comment">// c is not defined</span></span><br><span class="line">d; <span class="comment">// d is not defined</span></span><br><span class="line">e; <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p><a href="https://wcc723.github.io/javascript/2017/12/25/javascript-destructuring/">ES6 解構賦值</a></p><h3 id="小記"><a href="#小記" class="headerlink" title="小記"></a>小記</h3><p>可以作一些補充</p><ul><li>頁面上添加所有的歌單，直接點擊切換歌曲</li><li>加上音量功能</li><li>添加每首歌的秒數以及倒數</li><li>將旋轉的圖片改為前後各一張的 carousel 也可以透過這邊切歌曲</li></ul><h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><a href="https://www.w3school.com.cn/tags/html_ref_audio_video_dom.asp">HTML&lt;audio&gt;<vedio>Property</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement/timeupdate_event">timeupdate 事件</a></p>]]></content>
    
    
    <summary type="html">Allen&#39;s note</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>跨年倒數計時</title>
    <link href="https://alnwangchi.github.io/2021/11/26/%E8%B7%A8%E5%B9%B4%E5%80%92%E6%95%B8%E8%A8%88%E6%99%82/"/>
    <id>https://alnwangchi.github.io/2021/11/26/%E8%B7%A8%E5%B9%B4%E5%80%92%E6%95%B8%E8%A8%88%E6%99%82/</id>
    <published>2021-11-25T16:38:51.000Z</published>
    <updated>2021-11-25T16:39:47.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨年倒數計時-實作"><a href="#跨年倒數計時-實作" class="headerlink" title="跨年倒數計時 實作"></a>跨年倒數計時 實作</h1><h6 id="tags-實作-時間"><a href="#tags-實作-時間" class="headerlink" title="tags: 實作 時間"></a>tags: <code>實作</code> <code>時間</code></h6><p><a href="https://allenw0815.github.io/mission/mission_29/index.html">實作頁面連結</a></p><p><img src="https://i.imgur.com/zYpIPir.jpg"></p><h3 id="Flowchart"><a href="#Flowchart" class="headerlink" title="Flowchart"></a>Flowchart</h3><ol><li>寫 HTML 結構，要有標題、顯示時間的位置(天、時、分、秒)</li><li>寫 CSS</li><li>透過 JS 的 date() 來實現倒數</li></ol><blockquote><p>JS流程</p></blockquote><ol><li>要抓到 2022.01.01.00:00 的微秒然後去減掉現在時間的微秒</li><li>換算成天、時、分、秒</li><li>需要用到 Math() 方法來處理數字</li><li>得到時間後顯示在頁面中，並且每一秒執行一次實現倒數</li></ol><h3 id="途中發現"><a href="#途中發現" class="headerlink" title="途中發現"></a>途中發現</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">271.37654</span>)); <span class="comment">//272</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">271.37654</span>)); <span class="comment">//271</span></span><br></pre></td></tr></table></figure><ul><li>floor 地板代表取整數至最低 ceil 天花板代表取整數至最高</li></ul><p><img src="https://i.imgur.com/PQgXQHG.png"></p><ul><li>用了 % 來取餘數，本來忘記這個，要用未 floor 的數值減去已 floor 的來得到剩於時間，這樣程式碼會變成又臭又長 </li></ul><p><img src="https://i.imgur.com/sYkMQ09.png"></p><ul><li>先把 DOM 藏起來</li></ul><h3 id="小記"><a href="#小記" class="headerlink" title="小記"></a>小記</h3><p>不難，很快地就完成樣式以及功能，再去研究一下別人的寫法看看還有什麼可以補充。</p><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><p>補充了 loading 動畫，一開始先把整個 DOM 給 hidden 起來(見途中發現)，然後在 loading 跑完之後再顯示出來，使用下方程式碼實現移除 class ，因為是非同步事件，所以用 Proimse 來確保是 setTimeout 結束之後才執行移除 class 的動作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el.classList.remove(<span class="string">&#x27;hidden&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Ym7YZ1R.png"></p><h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Date">MDN Date</a><br><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Math">MDN Math</a></p>]]></content>
    
    
    <summary type="html">Allen&#39;s side project</summary>
    
    
    
    
    <category term="side project" scheme="https://alnwangchi.github.io/tags/side-project/"/>
    
  </entry>
  
  <entry>
    <title>This 指向</title>
    <link href="https://alnwangchi.github.io/2021/11/26/This%20%E6%8C%87%E5%90%91/"/>
    <id>https://alnwangchi.github.io/2021/11/26/This%20%E6%8C%87%E5%90%91/</id>
    <published>2021-11-25T16:37:10.000Z</published>
    <updated>2021-11-25T16:37:57.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="This-指向"><a href="#This-指向" class="headerlink" title="This 指向"></a>This 指向</h1><h6 id="tags-單元筆記-javascript-觀念"><a href="#tags-單元筆記-javascript-觀念" class="headerlink" title="tags: 單元筆記 javascript 觀念"></a>tags: <code>單元筆記</code> <code>javascript</code> <code>觀念</code></h6><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="comment">// this 代表函式的綁定物件，通常使用於函式內</span></span><br><span class="line">      <span class="comment">// 在不同的地方，綁定物件也就是 this 會不同</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 情況一 : 獨立的函式</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">t1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;t1 的 this : &quot;</span>, <span class="built_in">this</span>); <span class="comment">// 指向 window 物件</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;視窗寬度 : &quot;</span>, <span class="built_in">this</span>.innerWidth); <span class="comment">// 視窗寬度</span></span><br><span class="line">      &#125;</span><br><span class="line">      t1();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 情況二 : 物件的方法</span></span><br><span class="line">      <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">t2</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;t2 的 this : &quot;</span>, <span class="built_in">this</span>); <span class="comment">// 就是方法所屬的整個物件本人</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;物件內的屬性 : &quot;</span>, <span class="built_in">this</span>.x); <span class="comment">// 印出物件屬性</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">      obj.t2();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 情況三 : 事件處理的函式</span></span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;事件的 this : &quot;</span>, <span class="built_in">this</span>); <span class="comment">// 指的就是觸發這個事件的對象物件 是誰做了事件監聽?就是誰</span></span><br><span class="line">        <span class="built_in">this</span>.body.append(<span class="string">&quot;Click !!!&quot;</span>); <span class="comment">// 做甚麼事?</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 情況四 : 建構函式</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">t3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;t3 的 this : &quot;</span>, <span class="built_in">this</span>); <span class="comment">// 這邊瀏覽器就會幫我們建立一個空白物件</span></span><br><span class="line">        <span class="built_in">this</span>.x = <span class="number">1994</span>; <span class="comment">// 幫空物件添加屬性</span></span><br><span class="line">        <span class="built_in">this</span>.y = <span class="string">&quot;Allen&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//   new t3();</span></span><br><span class="line">      <span class="keyword">let</span> r3 = <span class="keyword">new</span> t3();</span><br><span class="line">      <span class="built_in">console</span>.log(r3);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 進階 : 自訂綁定物件</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">1994</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="string">&quot;Amy&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 重新綁定 bind</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">t4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;t4 的 this : &quot;</span>, <span class="built_in">this</span>); <span class="comment">// 指向 window 物件</span></span><br><span class="line">      &#125;</span><br><span class="line">      t4();</span><br><span class="line">      <span class="keyword">let</span> r4 = t4.bind(obj2);</span><br><span class="line">      r4();</span><br><span class="line">      <span class="keyword">let</span> r4_2 = t4.bind(<span class="built_in">document</span>);</span><br><span class="line">      r4_2();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 用 apply 呼叫函式 自己設定綁定物件及用陣列傳入參數</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">t5</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;結果 : &quot;</span>, a + b);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;t5 的 this : &quot;</span>, <span class="built_in">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      t5(<span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">      t5.apply(obj, [<span class="number">4</span>, <span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 用 call 呼叫函式 與apply相同只差在不用陣列傳入</span></span><br><span class="line">      t5.call(obj2, <span class="number">7</span>, <span class="number">23</span>);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><h2 id="小記"><a href="#小記" class="headerlink" title="小記"></a>小記</h2><p>:::info</p><p>:::</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="xxx">xxx</a><br><a href="https://medium.com/schaoss-blog/%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%A9%A6%E6%9C%80%E6%84%9B%E5%95%8F%E7%9A%84-apply-bind-call-708f57518776">一次搞懂前端面試最愛問的 apply、bind、call</a></p>]]></content>
    
    
    <summary type="html">Allen&#39;s note</summary>
    
    
    
    
    <category term="觀念紀錄" scheme="https://alnwangchi.github.io/tags/%E8%A7%80%E5%BF%B5%E7%B4%80%E9%8C%84/"/>
    
  </entry>
  
  <entry>
    <title>正則表達式 Regular Expression</title>
    <link href="https://alnwangchi.github.io/2021/11/26/%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F-Regular-Expression/"/>
    <id>https://alnwangchi.github.io/2021/11/26/%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F-Regular-Expression/</id>
    <published>2021-11-25T16:09:58.000Z</published>
    <updated>2021-11-25T16:10:29.826Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正則表達式-Regular-Expression"><a href="#正則表達式-Regular-Expression" class="headerlink" title="正則表達式 Regular Expression"></a>正則表達式 Regular Expression</h1><h6 id="tags-單元筆記"><a href="#tags-單元筆記" class="headerlink" title="tags: 單元筆記"></a>tags: <code>單元筆記</code></h6><h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Regular_Expressions">MDN文件說明</a><br><a href="https://regexone.com/">RegexOne練習網站</a></p><h3 id="主要用途"><a href="#主要用途" class="headerlink" title="主要用途"></a>主要用途</h3><p>過濾數字及文字的格式(電話號碼、身分證字號、Email)<br>也可以替代文字時使用</p><h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><p>將比對條件放在//之間</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Allen Wang&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result01 = str.match(<span class="regexp">/Wang/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result01.length); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result02 = <span class="regexp">/Wang/</span>.test(str);</span><br><span class="line"><span class="keyword">let</span> result03 = <span class="regexp">/wang/</span>.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result02); <span class="comment">//True</span></span><br><span class="line"><span class="built_in">console</span>.log(result03); <span class="comment">//False</span></span><br></pre></td></tr></table></figure><h3 id="符號記一下"><a href="#符號記一下" class="headerlink" title="符號記一下"></a>符號記一下</h3><table><thead><tr><th>字元</th><th>解說</th></tr></thead><tbody><tr><td>*</td><td>0個或是多個</td></tr><tr><td>+</td><td>1個或是多個</td></tr><tr><td>?</td><td>0個或是1個</td></tr><tr><td>\d</td><td>任何的數字</td></tr><tr><td>\D</td><td>任何的非數字</td></tr><tr><td>\</td><td>跳脫字元</td></tr><tr><td>[]</td><td>只能是([a-z][A-Z][0-9])</td></tr><tr><td>[^]</td><td>不能是</td></tr><tr><td>\w</td><td>任何字母數字</td></tr><tr><td>\W</td><td>任何非字母數字(應該就是指符號 )</td></tr><tr><td>{}</td><td>幾個字元</td></tr><tr><td>{,}</td><td>幾到幾個字元</td></tr><tr><td>\s</td><td>任何空白</td></tr><tr><td>\S</td><td>任何非空白</td></tr><tr><td>^…$</td><td>開頭跟結尾</td></tr><tr><td>()</td><td>capture group</td></tr><tr><td>(a|b)</td><td>match a or b</td></tr></tbody></table><h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>透過上方連結練習稍微理解過常用符號的用法<br>可用於表單驗證<br>有許多現成解答可直接google到</p>]]></content>
    
    
    <summary type="html">Allen&#39;s note</summary>
    
    
    
    
    <category term="正則" scheme="https://alnwangchi.github.io/tags/%E6%AD%A3%E5%89%87/"/>
    
  </entry>
  
  <entry>
    <title>Scope 作用域</title>
    <link href="https://alnwangchi.github.io/2021/11/25/Scope%20%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://alnwangchi.github.io/2021/11/25/Scope%20%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2021-11-25T15:24:44.000Z</published>
    <updated>2021-11-25T15:25:49.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scope-作用域"><a href="#Scope-作用域" class="headerlink" title="Scope 作用域"></a>Scope 作用域</h1><h6 id="tags-單元筆記-javascript-觀念"><a href="#tags-單元筆記-javascript-觀念" class="headerlink" title="tags: 單元筆記 javascript 觀念"></a>tags: <code>單元筆記</code> <code>javascript</code> <code>觀念</code></h6><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>區分成 Global 、 Function 、 Block 三種，指的是變數或常數的宣告與語句的可被存取得到的範圍。</p><ul><li>Global : 內層所有地方都可以存取這邊的內容，即全域變數</li><li>Function : var 宣告會被限制在內，不影響外層變數</li><li>Block : 就是以大括號 ( {} ) 劃分出作用的範圍，用 let 宣告會被限制在內，不影響外層變數</li></ul><p>大概就像這個樣子的大小範圍</p><p><img src="https://i.imgur.com/1QhgAgW.png"></p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>這邊說明 var 與 let 宣告的作用域，ex01 中 x 並未被限制在大括弧內，他還是可以被存取到，即是在Global Scope 中 ;<br>而 ex02 有將變數限制在大括弧內，也就是 Block Scope中 ;<br>然而 ex03 中 x 就有被限制在這個 funtion 內，也就是 Function Scope 中。</p><ul><li>ex01<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li><li>ex02<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(y) <span class="comment">// y is not defined</span></span><br></pre></td></tr></table></figure></li><li>ex03<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">allen</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">allen()</span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">// x is not defined</span></span><br></pre></td></tr></table></figure></li></ul><p>這邊說明 x 被限制在 Function Scope 中，若裡面找不到變數時則會向外找。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;全域 x&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">&#x27;區域 x&#x27;</span></span><br><span class="line">  <span class="built_in">console</span>.log(x) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">// 全域 x</span></span><br><span class="line">fn() <span class="comment">// 區域 x</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;全域 x&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x) <span class="comment">// 全域 x</span></span><br><span class="line">fn() <span class="comment">// 全域 x</span></span><br></pre></td></tr></table></figure><ul><li>ex04<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函式陳述式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函式表達式</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//箭頭函式</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a+b</span><br></pre></td></tr></table></figure><h2 id="小記"><a href="#小記" class="headerlink" title="小記"></a>小記</h2></li></ul><p>:::info<br>應避免使用 var，改用 let 和 const<br>const 具備所有 let 的特性，差別在於不能更改值，在明確不會更動資料時使用。<br>而 function 可以用 ex04 中的的第一及第三種，差別在於第一種會被提升，也就是可以在定義之前調用;<br>而第二種幾乎可以用第三種取代，第三種又有綁定 this 的好處。<br>:::</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://something-about-js-book.onejar99.com/day08">ES6 更嚴謹安全的 let 和 const</a><br><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part3/function_scope.html">函式與作用域</a><br><a href="https://kuro.tw/posts/2015/07/08/note-javascript-variables-declared-with-the-scope-scope/">JavaScript 變數宣告與作用域</a></p>]]></content>
    
    
    <summary type="html">Allen&#39;s note</summary>
    
    
    
    
    <category term="觀念紀錄" scheme="https://alnwangchi.github.io/tags/%E8%A7%80%E5%BF%B5%E7%B4%80%E9%8C%84/"/>
    
  </entry>
  
  <entry>
    <title>Hoisting 提升</title>
    <link href="https://alnwangchi.github.io/2021/11/23/Hoisting%20%E6%8F%90%E5%8D%87/"/>
    <id>https://alnwangchi.github.io/2021/11/23/Hoisting%20%E6%8F%90%E5%8D%87/</id>
    <published>2021-11-22T16:56:04.000Z</published>
    <updated>2021-11-22T17:19:24.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hoisting-提升"><a href="#Hoisting-提升" class="headerlink" title="Hoisting 提升"></a>Hoisting 提升</h1><h6 id="tags-單元筆記-javascript-觀念"><a href="#tags-單元筆記-javascript-觀念" class="headerlink" title="tags: 單元筆記 javascript 觀念"></a>tags: <code>單元筆記</code> <code>javascript</code> <code>觀念</code></h6><h2 id="介紹"><a href="#介紹" class="headerlink" title="介紹"></a>介紹</h2><p>hoisting 看起來是單純地將變數和函式宣告，移動到程式的區塊頂端。<br>但實際上是變數和函數的宣告時就會先建立一個記憶體空間，運行程式碼時再賦值。<br>函式提升的優先級大於變數。<br>let 與 const 也有 hoisting。<br>但他們不會初始化為 undefined，而且在賦值之前試圖取值會發生錯誤（TDZ error）。</p><h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>ex01就好比是02</p><ul><li>ex01<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;50&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>ex02<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">a = <span class="string">&#x27;50&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><hr><p>function expression 也會 hoisting</p><ul><li>這種函式建立方法稱為：function expression 函式表達式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(callSomeone); <span class="comment">// undefined</span></span><br><span class="line">callSomeone(<span class="string">&#x27;Allen&#x27;</span>); <span class="comment">// callSomeone is not a function</span></span><br><span class="line"><span class="keyword">var</span> callSomeone = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;打給 &#x27;</span> + name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>這種函式建立方法稱為：function declaration 函式陳述式 ( 直接以 function 開頭 )<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(callSomeone) <span class="comment">// function</span></span><br><span class="line">callSomeone(<span class="string">&#x27;Allen&#x27;</span>); <span class="comment">// 打給 Allen</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSomeone</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;打給 &#x27;</span> + name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><h4 id="為何需要"><a href="#為何需要" class="headerlink" title="為何需要?"></a>為何需要?</h4><p>讓 function 之間相互調用可行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n&gt;<span class="number">1</span>) &#123;</span><br><span class="line">    logEvenOrOdd(--n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logEvenOrOdd</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n, n % <span class="number">2</span> ? <span class="string">&#x27;Odd&#x27;</span> : <span class="string">&#x27;Even&#x27;</span>)</span><br><span class="line">  loop(n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loop(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h4 id="如果沒有-Hoisting-會怎樣"><a href="#如果沒有-Hoisting-會怎樣" class="headerlink" title="如果沒有 Hoisting 會怎樣 ?"></a>如果沒有 Hoisting 會怎樣 ?</h4><ol><li>一定要宣告變數才能使用</li><li>一定要宣告 function 才能使用</li><li>function 之間沒辦法互相調用</li></ol><h2 id="小記"><a href="#小記" class="headerlink" title="小記"></a>小記</h2><p>應該就是一個基本觀念，當中會有一些底層細節，”目前”來說只要我有好好的宣告變數，基本上就不會有太大的影響。</p><p>:::info<br>好習慣 : 使用前先宣告<br>:::</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://developer.mozilla.org/zh-TW/docs/Glossary/Hoisting">MDN</a><br><a href="https://blog.techbridge.cc/2018/11/10/javascript-hoisting/">我知道你懂 hoisting，可是你了解到多深？</a><br><a href="https://wcc723.github.io/javascript/2017/12/16/javascript-hoisting/">鐵人賽：JavaScript Function 與 Hoisting</a></p>]]></content>
    
    
    <summary type="html">Allen&#39;s note</summary>
    
    
    
    
    <category term="觀念紀錄" scheme="https://alnwangchi.github.io/tags/%E8%A7%80%E5%BF%B5%E7%B4%80%E9%8C%84/"/>
    
  </entry>
  
  <entry>
    <title>my first article</title>
    <link href="https://alnwangchi.github.io/2021/11/21/my-first-article/"/>
    <id>https://alnwangchi.github.io/2021/11/21/my-first-article/</id>
    <published>2021-11-21T07:28:29.000Z</published>
    <updated>2021-11-25T17:08:57.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="紀錄-HEXO-相關內容"><a href="#紀錄-HEXO-相關內容" class="headerlink" title="紀錄 HEXO 相關內容"></a>紀錄 HEXO 相關內容</h1><h2 id="不能忘記的-Hexo-指令"><a href="#不能忘記的-Hexo-指令" class="headerlink" title="不能忘記的 Hexo 指令"></a>不能忘記的 Hexo 指令</h2><p>hexo new ‘文章名稱’<br>hexo generate 產生發布內容<br>hexo server 啟動預覽 hexo s 簡寫<br>hexo clean<br>hexo deploy</p><h2 id="安裝的套件"><a href="#安裝的套件" class="headerlink" title="安裝的套件"></a>安裝的套件</h2><p>npm install hexo-generator-feed –save 讓右上方的搜尋能作用</p>]]></content>
    
    
    <summary type="html">Allen</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://alnwangchi.github.io/2021/11/21/hello-world/"/>
    <id>https://alnwangchi.github.io/2021/11/21/hello-world/</id>
    <published>2021-11-21T07:17:55.012Z</published>
    <updated>2021-11-25T17:09:09.505Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">Allen</summary>
    
    
    
    
  </entry>
  
</feed>
